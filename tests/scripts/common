#!/usr/bin/env bash

function run_polonius_reader_or_editor() {
	local reader="$1" file_name="$2"
	local -n raw_parameters_array="$3"
	local get_output="$4" return_code="" output="" result=""
	if [[ $reader -eq 1 ]]; then
		# Running polonius-reader
		if [[ $get_output -eq 1 ]]; then
			# Getting output, not return code
			result="$(polonius-reader "tmp/$file_name" "${raw_parameters_array[@]}" 2>/dev/null)"
		else
			# Getting return code
			polonius-reader "tmp/$file_name" "${raw_parameters_array[@]}" >/dev/null 2>&1
			result=$?
		fi
	else
		# Running polonius-editor
		polonius-editor "tmp/$file_name" "${raw_parameters_array[@]}" >/dev/null 2>&1
		return_code=$?
		output="$(cat "tmp/$file_name" 2>/dev/null)"

		if [[ $get_output -eq 1 ]]; then
			result="$output"
		else
			result="$return_code"
		fi
	fi
	echo "$result"
}

function execute_instruction() {
	# Returns the return code or resulting file contents from polonius-editor
	local instruction="$1" file_name="$2" get_output="$3" return_code="" output="" passed_args=()

	passed_args+=("-a")
	passed_args+=("$instruction")
	passed_args+=("-c") # Parse special chars

	result="$(run_polonius_reader_or_editor 0 "$file_name" "passed_args" "$get_output")"
	echo "$result"
}

function execute_instruction_sequence() {
	# Returns the return code or resulting file contents from polonius-editor
	local instruction_sequence="$1" file_name="$2" get_output="$3" return_code="" output="" passed_args=()

	passed_args+=("-a")
	passed_args+=("$instruction_sequence")
	passed_args+=("-c") # Parse special chars

	result="$(run_polonius_reader_or_editor 0 "$file_name" "passed_args" "$get_output")"
	echo "$result"
}

function execute_instruction_file() {
	# Returns the return code or resulting file contents from polonius-editor
	local instruction_file_path="$1" file_name="$2" get_output="$3" return_code="" output="" passed_args=()

	passed_args+=("-f")
	passed_args+=("tmp/$instruction_file_path")
	passed_args+=("-c") # Parse special chars

	result="$(run_polonius_reader_or_editor 0 "$file_name" "passed_args" "$get_output")"
	echo "$result"
}

function populate_reader_args_array() {
	# Populates the inputted "passed_args" array based on the inputted flags
	local -n array_to_modify="$1"
	local is_search="$2" search_query="$3" search_is_regex="$4" parse_special_chars="$5" output_pos="$6" start_pos="$7" length="$8"

	if [[ $is_search -eq 1 ]]; then
		array_to_modify+=("-f")
		array_to_modify+=("$search_query")
	fi

	if [[ $search_is_regex -eq 1 ]]; then
		array_to_modify+=("-e")
	fi

	if [[ $parse_special_chars -eq 1 ]]; then
		array_to_modify+=("-c")
	fi

	if [[ "$start_pos" != "" ]]; then
		array_to_modify+=("-s")
		array_to_modify+=("$start_pos")
	fi

	if [[ "$length" != "" ]]; then
		array_to_modify+=("-l")
		array_to_modify+=("$length")
	fi

	if [[ "$output_pos" -eq 1 ]]; then
		array_to_modify+=("-p")
	fi
}

function execute_reader_command() {
	# Returns the return code or text response from polonius-reader
	local file_name="$1" get_output="$2" is_search="$3" search_query="$4" search_is_regex="$5" parse_special_chars="$6" output_pos="$7" start_pos="$8" length="$9" passed_args=()

	populate_reader_args_array "passed_args" "$is_search" "$search_query" "$search_is_regex" "$parse_special_chars" "$output_pos" "$start_pos" "$length"

	result="$(run_polonius_reader_or_editor 1 "$file_name" "passed_args" "$get_output")"
	echo "$result"

	rm -f "tmp/${file_name:?}" # Clean up after yourself!
}

function check_reader_command() {
	# Sets 'all_ok' to 1 if the return code is not what we expect it to be
	local test_name="$1" file_name="$2" should_return_zero="$3" is_search="$4" search_query="$5" search_is_regex="$6" parse_special_chars="$7" output_pos="$8" start_pos="$9" length="${10}" passed_args=() return_code=""

	return_code=$(execute_reader_command "$file_name" 0 "$is_search" "$search_query" "$search_is_regex" "$parse_special_chars" "$output_pos" "$start_pos" "$length")

	if [[ $should_return_zero -eq 0 ]] && [[ $return_code -ne 0 ]]; then
		true # Everything OK
	elif [[ $should_return_zero -eq 1 ]] && [[ $return_code -eq 0 ]]; then
		true # Everything OK
	else
		export all_ok=1 # Everything not OK
		{
			populate_reader_args_array "passed_args" "$is_search" "$search_query" "$search_is_regex" "$parse_special_chars" "$output_pos" "$start_pos" "$length"
			echo "--"
			# shellcheck disable=SC2145
			echo "INSTRUCTION: polonius-reader \"tmp/$file_name\" ${passed_args[@]}"
			echo "Return code: $return_code"
			echo "Should return 0?: $should_return_zero"
			echo "File name: tmp/$file_name"
		}  >> "debug/${test_name:?}"
	fi
}

function check_reader_output_is_correct() {
	# Sets all_ok to 1 if the output is not what we expect it to be
	local expected_output="$1" test_name="$2" file_name="$3" is_search="$4" search_query="$5" search_is_regex="$6" parse_special_chars="$7" output_pos="$8" start_pos="$9" length="${10}" passed_args=() actual_output=""

	actual_output="$(execute_reader_command "$file_name" 1 "$is_search" "$search_query" "$search_is_regex" "$parse_special_chars" "$output_pos" "$start_pos" "$length")"

	if [[ "$expected_output" == "$actual_output" ]]; then
		# Everything OK
		true
	else
		export all_ok=1 # Everything not OK
		{
			populate_reader_args_array "passed_args" "$is_search" "$search_query" "$search_is_regex" "$parse_special_chars" "$output_pos" "$start_pos" "$length"
			echo "--"
			# shellcheck disable=SC2145
			echo "INSTRUCTION: polonius-reader \"tmp/$file_name\" ${passed_args[@]}"
			echo "Expected result: $expected_output"
			echo "Actual result: $actual_output"
			echo "File name: tmp/$file_name"
		}  >> "debug/${test_name:?}"
	fi
}

function prepare_a_file_for_instruction() {
	local new_file="$1" file_name="$2"

	if [[ "$file_name" == "" ]]; then
		file_name="$(basename "$(mktemp -u)")"
	fi

	if [[ "$new_file" == "1" ]]; then
		rm -f "tmp/${file_name:?}"
	fi
	
	echo "$file_name"
}

function get_output_of_instruction() {
	local instruction="$1" test_name="$2" new_file="$3" file_name="$4"

	file_name=$(prepare_a_file_for_instruction "$new_file" "$file_name")
	output=$(execute_instruction "$instruction" "$file_name" 1)

	rm -f "tmp/${file_name:?}"

	echo "$output"
}

function get_output_of_instruction_sequence() {
	local instruction_sequence="$1" test_name="$2" new_file="$3" file_name="$4"

	file_name=$(prepare_a_file_for_instruction "$new_file" "$file_name")
	output=$(execute_instruction_sequence "$instruction_sequence" "$file_name" 1)

	rm -f "tmp/${file_name:?}"

	echo "$output"
}

function get_output_of_instruction_file() {
	local instruction_sequence="$1" test_name="$2" new_file="$3" file_name="$4"

	file_name=$(prepare_a_file_for_instruction "$new_file" "$file_name")
	instruction_file=$(create_test_file "$instruction_sequence")
	output=$(execute_instruction_file "$instruction_file" "$file_name" 1)

	rm -f "tmp/${file_name:?}"
	rm -f "tmp/${instruction_file:?}"

	echo "$output"
}

function check_output_of_instruction_is_correct() {
	local expected_output="$1" instruction="$2" test_name="$3" new_file="$4" file_name="$5" actual_output=""

	actual_output="$(get_output_of_instruction "$instruction" "$test_name" "$new_file" "$file_name")"

	if [[ "$expected_output" == "$actual_output" ]]; then
		# Everything OK
		true
	else
		export all_ok=1 # Everything not OK
		{
			echo "--"
			echo "INSTRUCTION: $instruction"
			echo "Expected result: $expected_output"
			echo "Actual result: $actual_output"
			echo "File name: tmp/$file_name"
		}  >> "debug/${test_name:?}"
	fi
}

function check_output_of_instruction_sequence_is_correct() {
	local expected_output="$1" instruction_sequence="$2" test_name="$3" new_file="$4" file_name="$5" actual_output=""

	actual_output="$(get_output_of_instruction_sequence "$instruction_sequence" "$test_name" "$new_file" "$file_name")"

	if [[ "$expected_output" == "$actual_output" ]]; then
		# Everything OK
		true
	else
		export all_ok=1 # Everything not OK
		{
			echo "--"
			echo "INSTRUCTION SEQUENCE: $instruction_sequence"
			echo "Expected result: $expected_output"
			echo "Actual result: $actual_output"
			echo "File name: tmp/$file_name"
		}  >> "debug/${test_name:?}"
	fi
}

function check_output_of_instruction_file_is_correct() {
	local expected_output="$1" instruction_sequence="$2" test_name="$3" new_file="$4" file_name="$5" actual_output=""

	actual_output="$(get_output_of_instruction_file "$instruction_sequence" "$test_name" "$new_file" "$file_name")"

	if [[ "$expected_output" == "$actual_output" ]]; then
		# Everything OK
		true
	else
		export all_ok=1 # Everything not OK
		{
			echo "--"
			echo "INSTRUCTION SEQUENCE: $instruction_sequence"
			echo "Expected result: $expected_output"
			echo "Actual result: $actual_output"
			echo "File name: tmp/$file_name"
		}  >> "debug/${test_name:?}"
	fi
}

function check_instruction() {
	local instruction="$1" test_name="$2" should_return_zero="$3" file_should_exist="$4" new_file="$5" file_name="$6" return_code="" file_exists="" returned_correctly=0

	file_name=$(prepare_a_file_for_instruction "$new_file" "$file_name")
	return_code=$(execute_instruction "$instruction" "$file_name")

	file_exists=$([[ -f "tmp/$file_name" ]] && echo 1 || echo 0)

	rm -f "tmp/${file_name:?}"

	if [[ $should_return_zero -eq 0 ]] && [[ $return_code -ne 0 ]]; then
		returned_correctly=1
	elif [[ $should_return_zero -eq 1 ]] && [[ $return_code -eq 0 ]]; then
		returned_correctly=1
	else
		returned_correctly=0
	fi

	if [[ $returned_correctly -eq 1 ]] && [[ $file_exists -eq $file_should_exist ]]; then
		# Everything OK
		true
	else
		export all_ok=1 # Everything not OK
		{
			echo "--"
			echo "INSTRUCTION: $instruction"
			echo "Return code: $return_code"
			echo "Should return 0?: $should_return_zero"
			echo "File exists?: $file_exists"
			echo "File should exist?: $file_should_exist"
			echo "File name: tmp/$file_name"
		}  >> "debug/${test_name:?}"
	fi
}

function create_test_file() {
	# Returns the new test file name
	local contents="$1" name="$2"
	
	if [[ "$name" == "" ]]; then
		name="$(basename "$(mktemp -u)")"
	fi

	echo "$contents" > "tmp/${name:?}"
	echo "$name"
}
